install.packages("powerjoin")
install.packages("vip")
install.packages("baguette")
library(tidyverse)
library(tidymodels)
library(powerjoin)
library(glue)
library(vip)
library(baguette)
root  <- 'https://gdex.ucar.edu/dataset/camels/file'
download.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf',
'data/camels_attributes_v2.0.pdf')
types <- c("clim", "geol", "soil", "topo", "vege", "hydro")
remote_files  <- glue('{root}/camels_{types}.txt')
local_files   <- glue('data/camels_{types}.txt')
walk2(remote_files, local_files, download.file, quiet = TRUE)
download.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf',
'data/camels_attributes_v2.0.pdf')
walk2(remote_files, local_files, download.file, quiet = TRUE)
file.exists("data/camels_attributes_v2.0.pdf")
utils::browseURL("data/camels_attributes_v2.0.pdf")
camels <- map(local_files, read_delim, show_col_types = FALSE)
camels <- map(local_files, read_delim, show_col_types = FALSE)
list.files("docs")
if (!dir.exists("data"))
k
if (!dir.exists("data")) {
dir.create("data")
}
download.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf',
'data/camels_attributes_v2.0.pdf')
local_files <- c("camels_clim.txt", "camels_geol.txt", "camels_soil.txt", "camels_topo.txt", "camels_vege.txt", "camels_hydro.txt")
camels <- map(local_files, ~read_delim(file.path("data", .x), show_col_types = FALSE))
remote_files  <- glue('{root}/camels_{types}.txt')
local_files   <- glue('data/camels_{types}.txt')
library(purrr)
walk2(remote_files, local_files, download.file, quiet = TRUE)
library(readr)
walk2(remote_files, local_files, download.file, quiet = TRUE)
camels <- map(local_files, read_delim, show_col_types = FALSE)
if (!dir.exists("data")) {
dir.create("data")
}
walk2(remote_files, local_files, download.file, quiet = TRUE)
file.access("data", 2)
getwd()
setwd("C:/Users/aldai/Git/ESS-330-Lab-6/docs/")
if (!dir.exists("data")) {
dir.create("data")
}
walk2(remote_files, local_files, download.file, quiet = TRUE)
camels <- map(local_files, read_delim, show_col_types = FALSE)
View(camels)
ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
borders("state", colour = "darkgreen") +
geom_point(aes(color = q_mean)) +
scale_color_gradient(low = "orange", high = "blue") +
ggthemes::theme_map()
str(camels)
camels_df <- bind_rows(camels)
View(camels_df)
colnames(camels_df)
summary(camels_df)
anyNA(camels_df[c("gauge_lat", "gauge_lon", "q_mean")])
camels_df <- camels_df %>%
filter(!is.na(gauge_lat), !is.na(gauge_lon), !is.na(q_mean))
library(ggplot2)
library(ggthemes)
ggplot(data = camels_df, aes(x = gauge_lon, y = gauge_lat)) +
borders("state", colour = "darkgreen") +
geom_point(aes(color = q_mean)) +
scale_color_gradient(low = "orange", high = "blue") +
ggthemes::theme_map()
View(camels_df)
rm(camels_df)
rm(camels)
root  <- 'https://gdex.ucar.edu/dataset/camels/file'
download.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf',
'data/camels_attributes_v2.0.pdf')
types <- c("clim", "geol", "soil", "topo", "vege", "hydro")
remote_files  <- glue('{root}/camels_{types}.txt')
local_files <- glue('docs/data/camels_{types}.txt')
walk2(remote_files, local_files, download.file, quiet = TRUE)
remote_files  <- glue('{root}/camels_{types}.txt')
local_files   <- glue('data/camels_{types}.txt')
walk2(remote_files, local_files, download.file, quiet = TRUE)
camels <- map(local_files, read_delim, show_col_types = FALSE)
View(camels)
camels[[1]]
camels
camels <- power_full_join(camels ,by = 'gauge_id')
ggplot(data = camels_df, aes(x = gauge_lon, y = gauge_lat)) +
borders("state", colour = "darkgreen") +
geom_point(aes(color = q_mean)) +
scale_color_gradient(low = "orange", high = "blue") +
ggthemes::theme_map()
ggplot(data = camels, aes(x = gauge_lon, y = gauge_lat)) +
borders("state", colour = "darkgreen") +
geom_point(aes(color = q_mean)) +
scale_color_gradient(low = "orange", high = "blue") +
ggthemes::theme_map()
camels |>
select(aridity, p_mean, q_mean) |>
drop_na() |>
cor()
ggplot(camels, aes(x = aridity, y = p_mean)) +
geom_point(aes(color = q_mean)) +
geom_smooth(method = "lm", color = "lightblue", linetype = 2) +
scale_color_viridis_c() +
theme_linedraw() +
theme(legend.position = "bottom") +
labs(title = "Aridity vs Rainfall vs Runnoff",
x = "Aridity",
y = "Rainfall",
color = "Mean Flow")
ggplot(camels, aes(x = aridity, y = p_mean)) +
geom_point(aes(color = q_mean)) +
geom_smooth(method = "lm", color = "yellow", linetype = 2) +
scale_color_viridis_c() +
theme_linedraw() +
theme(legend.position = "bottom") +
labs(title = "Aridity vs Rainfall vs Runnoff",
x = "Aridity",
y = "Rainfall",
color = "Mean Flow")
ggplot(camels, aes(x = aridity, y = p_mean)) +
geom_point(aes(color = q_mean)) +
geom_smooth(method = "lm") +
scale_color_viridis_c() +
scale_x_log10() +
scale_y_log10() +
theme_linedraw() +
theme(legend.position = "bottom") +
labs(title = "Aridity vs Rainfall vs Runnoff",
x = "Aridity",
y = "Rainfall",
color = "Mean Flow")
ggplot(camels, aes(x = aridity, y = p_mean)) +
geom_point(aes(color = q_mean)) +
geom_smooth(method = "lm") +
scale_color_viridis_c(trans = "log") +
scale_x_log10() +
scale_y_log10() +
theme_linedraw() +
theme(legend.position = "bottom",
legend.key.width = unit(2.5, "cm"),
legend.key.height = unit(.5, "cm")) +
labs(title = "Aridity vs Rainfall vs Runnoff",
x = "Aridity",
y = "Rainfall",
color = "Mean Flow")
set.seed(123)
camels <- camels |>
mutate(logQmean = log(q_mean))
camels_split <- initial_split(camels, prop = 0.8)
camels_train <- training(camels_split)
camels_test <- testing(camels_split)
536/671
camels_cv <- vfold_cv(camels_train, v = 10)
rec <-  recipe(logQmean ~ aridity + p_mean, data = camels_train) %>%
step_log(all_predictors()) %>%
step_interact(terms = ~ aridity:p_mean) |>
step_naomit(all_predictors(), all_outcomes())
View(camels_train)
View(camels_test)
View(camels_test)
View(rec)
baked_data <- prep(rec, camels_train) |>
bake(new_data = NULL)
lm_base <- lm(logQmean ~ aridity * p_mean, data = baked_data)
summary(lm_base)
View(baked_data)
summary(lm(logQmean ~ aridity + p_mean + aridity_x_p_mean, data = baked_data))
test_data <-  bake(prep(rec), new_data = camels_test)
test_data$lm_pred <- predict(lm_base, newdata = test_data)
metrics(test_data, truth = logQmean, estimate = lm_pred)
ggplot(test_data, aes(x = logQmean, y = lm_pred, colour = aridity)) +
scale_color_gradient2(low = "red", mid = "orange", high = "yellow") +
geom_point() +
geom_abline(linetype = 2) +
theme_linedraw() +
labs(title = "Linear Model: Observed vs Predicted",
x = "Observed Log Mean Flow",
y = "Predicted Log Mean Flow",
color = "Aridity")
lm_model <- linear_reg() %>%
set_engine("lm") %>%
set_mode("regression")
lm_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(lm_model) %>%
fit(data = camels_train)
summary(extract_fit_engine(lm_wf))$coefficients
summary(lm_base)$coefficients
lm_data <- augment(lm_wf, new_data = camels_test)
dim(lm_data)
metrics(lm_data, truth = logQmean, estimate = .pred)
ggplot(lm_data, aes(x = logQmean, y = .pred, colour = aridity)) +
scale_color_viridis_c() +
geom_point() +
geom_abline() +
theme_linedraw()
rf_model <- rand_forest() %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("regression")
rf_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(rf_model) %>%
fit(data = camels_train)
library(baguette)
rf_model <- rand_forest() %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("regression")
rf_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(rf_model) %>%
fit(data = camels_train)
?ranger
install.packages("ranger")
library(ranger)
rf_model <- rand_forest() %>%
set_engine("ranger", importance = "impurity") %>%
set_mode("regression")
rf_wf <- workflow() %>%
add_recipe(rec) %>%
add_model(rf_model) %>%
fit(data = camels_train)
rf_data <- augment(rf_wf, new_data = camels_test)
dim(rf_data)
metrics(rf_data, truth = logQmean, estimate = .pred)
ggplot(rf_data, aes(x = logQmean, y = .pred, colour = aridity)) +
scale_color_viridis_c() +
geom_point() +
geom_abline() +
theme_linedraw()
autoplot(wf)
wf <- workflow_set(list(rec), list(lm_model, rf_model)) %>%
workflow_map('fit_resamples', resamples = camels_cv)
autoplot(wf)
rank_results(wf, rank_metric = "rsq", select_best = TRUE)
install.packages("powerjoin")
install.packages("vip")
install.packages("baguette")
library(tidyverse)
library(tidymodels)
library(tidyverse)
library(tidymodels)
library(powerjoin)
library(glue)
library(vip)
library(baguette)
library(purrr)
library(readr)
library(ggplot2)
library(ggthemes)
boost_model <- boost_tree() |>
set_engine("xgboost") |>
set_mode('regression')
?`baguette-package`
